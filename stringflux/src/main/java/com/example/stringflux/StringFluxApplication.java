package com.example.stringflux;

import org.springframework.boot.autoconfigure.SpringBootApplication;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@SpringBootApplication
public class StringFluxApplication {

    public static void main(String[] args) {

         /*  ArrayList<String> fruit = new ArrayList<>();
        fruit.add("Apple");
        fruit.add("Mango");
        fruit.add("Pineapple");
        fruit.add("Kiwi");


        List<Integer> list = fruit.stream()
                .map(String::length)
                .toList();
        System.out.println("List generated by map-" + list);*/



        List<List<Integer> > number = new ArrayList<>();
        number.add(Arrays.asList(1, 2));
        number.add(Arrays.asList(3, 4));
        number.add(Arrays.asList(5, 6));
        number.add(Arrays.asList(7, 8));


        List<Integer> flatList
                = number.stream()
                .flatMap(Collection::stream)
                .toList();
        System.out.println("List generate by flatMap-" + flatList);




//
//        Flux<String> flux1 = Flux.just("Hello,", "Welcome To");
//        Flux<String> flux2 = Flux.just("A", "new World!");

//		Mono<String> mergedFlux = Flux.concat(flux1, flux2)
//				.map(String::toUpperCase)
//				.reduce((s1, s2) -> s1 + " " + s2);
//
//		mergedFlux.subscribe(System.out::println);

//
//		Mono<Object> concatFlux = Flux.concat(flux1, flux2)
//				.map(String::toUpperCase)
//				.collectList()
//				.map(list -> String.join(" ", list));
//		concatFlux.subscribe(System.out::println);
//
//
//		Mono<Object> concatWithFlux = flux1.concatWith(flux2)
//				.map(String::toUpperCase)
//				.collectList()
//				.map(list -> String.join(" ", list));
//		concatWithFlux.subscribe(System.out::println);

//		Mono<Object> mergeWithFlux = flux1.mergeWith(flux2)
//				.map(String::toUpperCase)
//				.collectList()
//				.map(list -> String.join(" ", list));
//		mergeWithFlux.subscribe(System.out::println);
//
        /*Mono<String> zipWithFlux = flux1.zipWith(flux2, (str1, str2) -> str1 + " " + str2)
                .map(String::toUpperCase)
                .collectList()
                .map(list -> String.join(" ", list))
                .log();

        zipWithFlux.subscribe(System.out::println);*/

    }

}
